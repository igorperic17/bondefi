/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../../../../common";
import type {
  BadBeaconNotContract,
  BadBeaconNotContractInterface,
} from "../../../../../../../../contracts/lib/uniswap/openzeppelin/contracts/mocks/BadBeacon.sol/BadBeaconNotContract";

const _abi = [
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50608a8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80635c60da1b14602d575b600080fd5b6033604f565b604080516001600160a01b039092168252519081900360200190f35b60019056fea26469706673582212208d9e39ee7cccb71320adb9ea9153c8427b1876458ee4e1ad68f91d32cf4e772364736f6c63430007060033";

type BadBeaconNotContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BadBeaconNotContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BadBeaconNotContract__factory extends ContractFactory {
  constructor(...args: BadBeaconNotContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      BadBeaconNotContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): BadBeaconNotContract__factory {
    return super.connect(runner) as BadBeaconNotContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BadBeaconNotContractInterface {
    return new Interface(_abi) as BadBeaconNotContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): BadBeaconNotContract {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as BadBeaconNotContract;
  }
}
