/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../../../common";
import type {
  StringsMock,
  StringsMockInterface,
} from "../../../../../../../contracts/lib/uniswap/openzeppelin/contracts/mocks/StringsMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "fromUint256",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101e6806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a2bd364414610030575b600080fd5b61004d6004803603602081101561004657600080fd5b50356100c2565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561008757818101518382015260200161006f565b50505050905090810190601f1680156100b45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60606100cd826100d5565b90505b919050565b6060816100fa57506040805180820190915260018152600360fc1b60208201526100d0565b8160005b811561011257600101600a820491506100fe565b60008167ffffffffffffffff8111801561012b57600080fd5b506040519080825280601f01601f191660200182016040528015610156576020820181803683370190505b50859350905060001982015b83156101a757600a840660300160f81b8282806001900393508151811061018557fe5b60200101906001600160f81b031916908160001a905350600a84049350610162565b5094935050505056fea2646970667358221220688df0306c6087428776337d28e637660031ec876fb20a9c7d81343f48df2ebf64736f6c63430007060033";

type StringsMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StringsMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StringsMock__factory extends ContractFactory {
  constructor(...args: StringsMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      StringsMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): StringsMock__factory {
    return super.connect(runner) as StringsMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StringsMockInterface {
    return new Interface(_abi) as StringsMockInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): StringsMock {
    return new Contract(address, _abi, runner) as unknown as StringsMock;
  }
}
