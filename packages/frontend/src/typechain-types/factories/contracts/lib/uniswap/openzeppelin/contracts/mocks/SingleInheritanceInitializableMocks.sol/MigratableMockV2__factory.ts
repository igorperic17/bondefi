/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../../../../common";
import type {
  MigratableMockV2,
  MigratableMockV2Interface,
} from "../../../../../../../../contracts/lib/uniswap/openzeppelin/contracts/mocks/SingleInheritanceInitializableMocks.sol/MigratableMockV2";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "anotherValue",
        type: "uint256",
      },
    ],
    name: "migrate",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "x",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "y",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610218806100206000396000f3fe60806040526004361061003f5760003560e01c80630c55699c146100445780633e54bacb1461006b578063a56dfe4a14610090578063fe4b84df146100a5575b600080fd5b34801561005057600080fd5b506100596100c2565b60408051918252519081900360200190f35b61008e6004803603604081101561008157600080fd5b50803590602001356100c8565b005b34801561009c57600080fd5b506100596100ef565b61008e600480360360208110156100bb57600080fd5b50356100f5565b60015481565b60025460ff16156100d857600080fd5b60019182556003556002805460ff19169091179055565b60035481565b600054610100900460ff168061010e575061010e61019d565b8061011c575060005460ff16155b6101575760405162461bcd60e51b815260040180806020018281038252602e8152602001806101b5602e913960400191505060405180910390fd5b600054610100900460ff16158015610182576000805460ff1961ff0019909116610100171660011790555b60018290558015610199576000805461ff00191690555b5050565b60006101a8306101ae565b15905090565b3b15159056fe496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564a26469706673582212206e7f3a6e9c05faf90af5c8a9ff8a26b0431194d3e2c940f426adf9e0afe6724764736f6c63430007060033";

type MigratableMockV2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MigratableMockV2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MigratableMockV2__factory extends ContractFactory {
  constructor(...args: MigratableMockV2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MigratableMockV2 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MigratableMockV2__factory {
    return super.connect(runner) as MigratableMockV2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MigratableMockV2Interface {
    return new Interface(_abi) as MigratableMockV2Interface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MigratableMockV2 {
    return new Contract(address, _abi, runner) as unknown as MigratableMockV2;
  }
}
