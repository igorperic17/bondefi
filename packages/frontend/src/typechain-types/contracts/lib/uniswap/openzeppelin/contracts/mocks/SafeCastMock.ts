/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../../../common";

export interface SafeCastMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "toInt128"
      | "toInt16"
      | "toInt256"
      | "toInt32"
      | "toInt64"
      | "toInt8"
      | "toUint128"
      | "toUint16"
      | "toUint256"
      | "toUint32"
      | "toUint64"
      | "toUint8"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "toInt128",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toInt16",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toInt256",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toInt32",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toInt64",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toInt8",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUint128",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUint16",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUint256",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUint32",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUint64",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUint8",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "toInt128", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toInt16", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toInt256", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toInt32", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toInt64", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toInt8", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toUint128", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toUint16", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toUint256", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toUint32", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toUint64", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toUint8", data: BytesLike): Result;
}

export interface SafeCastMock extends BaseContract {
  connect(runner?: ContractRunner | null): SafeCastMock;
  waitForDeployment(): Promise<this>;

  interface: SafeCastMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  toInt128: TypedContractMethod<[a: BigNumberish], [bigint], "view">;

  toInt16: TypedContractMethod<[a: BigNumberish], [bigint], "view">;

  toInt256: TypedContractMethod<[a: BigNumberish], [bigint], "view">;

  toInt32: TypedContractMethod<[a: BigNumberish], [bigint], "view">;

  toInt64: TypedContractMethod<[a: BigNumberish], [bigint], "view">;

  toInt8: TypedContractMethod<[a: BigNumberish], [bigint], "view">;

  toUint128: TypedContractMethod<[a: BigNumberish], [bigint], "view">;

  toUint16: TypedContractMethod<[a: BigNumberish], [bigint], "view">;

  toUint256: TypedContractMethod<[a: BigNumberish], [bigint], "view">;

  toUint32: TypedContractMethod<[a: BigNumberish], [bigint], "view">;

  toUint64: TypedContractMethod<[a: BigNumberish], [bigint], "view">;

  toUint8: TypedContractMethod<[a: BigNumberish], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "toInt128"
  ): TypedContractMethod<[a: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "toInt16"
  ): TypedContractMethod<[a: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "toInt256"
  ): TypedContractMethod<[a: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "toInt32"
  ): TypedContractMethod<[a: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "toInt64"
  ): TypedContractMethod<[a: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "toInt8"
  ): TypedContractMethod<[a: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "toUint128"
  ): TypedContractMethod<[a: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "toUint16"
  ): TypedContractMethod<[a: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "toUint256"
  ): TypedContractMethod<[a: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "toUint32"
  ): TypedContractMethod<[a: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "toUint64"
  ): TypedContractMethod<[a: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "toUint8"
  ): TypedContractMethod<[a: BigNumberish], [bigint], "view">;

  filters: {};
}
