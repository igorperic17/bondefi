/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../../../common";

export interface SafeMathMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addMemoryCheck"
      | "divMemoryCheck"
      | "divWithMessage"
      | "doAdd"
      | "doDiv"
      | "doMod"
      | "doMul"
      | "doSub"
      | "modMemoryCheck"
      | "modWithMessage"
      | "mulMemoryCheck"
      | "subMemoryCheck"
      | "subWithMessage"
      | "tryAdd"
      | "tryDiv"
      | "tryMod"
      | "tryMul"
      | "trySub"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addMemoryCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "divMemoryCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "divWithMessage",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "doAdd",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "doDiv",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "doMod",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "doMul",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "doSub",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "modMemoryCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "modWithMessage",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mulMemoryCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subMemoryCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subWithMessage",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tryAdd",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tryDiv",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tryMod",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tryMul",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trySub",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addMemoryCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "divMemoryCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "divWithMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "doAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "doDiv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "doMod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "doMul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "doSub", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "modMemoryCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modWithMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mulMemoryCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subMemoryCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subWithMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tryAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tryDiv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tryMod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tryMul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trySub", data: BytesLike): Result;
}

export interface SafeMathMock extends BaseContract {
  connect(runner?: ContractRunner | null): SafeMathMock;
  waitForDeployment(): Promise<this>;

  interface: SafeMathMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addMemoryCheck: TypedContractMethod<[], [bigint], "view">;

  divMemoryCheck: TypedContractMethod<[], [bigint], "view">;

  divWithMessage: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish, errorMessage: string],
    [bigint],
    "view"
  >;

  doAdd: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [bigint],
    "view"
  >;

  doDiv: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [bigint],
    "view"
  >;

  doMod: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [bigint],
    "view"
  >;

  doMul: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [bigint],
    "view"
  >;

  doSub: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [bigint],
    "view"
  >;

  modMemoryCheck: TypedContractMethod<[], [bigint], "view">;

  modWithMessage: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish, errorMessage: string],
    [bigint],
    "view"
  >;

  mulMemoryCheck: TypedContractMethod<[], [bigint], "view">;

  subMemoryCheck: TypedContractMethod<[], [bigint], "view">;

  subWithMessage: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish, errorMessage: string],
    [bigint],
    "view"
  >;

  tryAdd: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [[boolean, bigint] & { flag: boolean; value: bigint }],
    "view"
  >;

  tryDiv: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [[boolean, bigint] & { flag: boolean; value: bigint }],
    "view"
  >;

  tryMod: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [[boolean, bigint] & { flag: boolean; value: bigint }],
    "view"
  >;

  tryMul: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [[boolean, bigint] & { flag: boolean; value: bigint }],
    "view"
  >;

  trySub: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [[boolean, bigint] & { flag: boolean; value: bigint }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addMemoryCheck"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "divMemoryCheck"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "divWithMessage"
  ): TypedContractMethod<
    [a: BigNumberish, b: BigNumberish, errorMessage: string],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "doAdd"
  ): TypedContractMethod<[a: BigNumberish, b: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "doDiv"
  ): TypedContractMethod<[a: BigNumberish, b: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "doMod"
  ): TypedContractMethod<[a: BigNumberish, b: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "doMul"
  ): TypedContractMethod<[a: BigNumberish, b: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "doSub"
  ): TypedContractMethod<[a: BigNumberish, b: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "modMemoryCheck"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "modWithMessage"
  ): TypedContractMethod<
    [a: BigNumberish, b: BigNumberish, errorMessage: string],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "mulMemoryCheck"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "subMemoryCheck"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "subWithMessage"
  ): TypedContractMethod<
    [a: BigNumberish, b: BigNumberish, errorMessage: string],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tryAdd"
  ): TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [[boolean, bigint] & { flag: boolean; value: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "tryDiv"
  ): TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [[boolean, bigint] & { flag: boolean; value: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "tryMod"
  ): TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [[boolean, bigint] & { flag: boolean; value: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "tryMul"
  ): TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [[boolean, bigint] & { flag: boolean; value: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "trySub"
  ): TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [[boolean, bigint] & { flag: boolean; value: bigint }],
    "view"
  >;

  filters: {};
}
