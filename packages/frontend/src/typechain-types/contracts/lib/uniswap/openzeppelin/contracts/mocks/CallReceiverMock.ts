/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../../common";

export interface CallReceiverMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "mockFunction"
      | "mockFunctionNonPayable"
      | "mockFunctionOutOfGas"
      | "mockFunctionRevertsNoReason"
      | "mockFunctionRevertsReason"
      | "mockFunctionThrows"
      | "mockFunctionWritesStorage"
      | "mockStaticFunction"
      | "sharedAnswer"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "MockFunctionCalled"): EventFragment;

  encodeFunctionData(
    functionFragment: "mockFunction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockFunctionNonPayable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockFunctionOutOfGas",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockFunctionRevertsNoReason",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockFunctionRevertsReason",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockFunctionThrows",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockFunctionWritesStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockStaticFunction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sharedAnswer",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "mockFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockFunctionNonPayable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockFunctionOutOfGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockFunctionRevertsNoReason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockFunctionRevertsReason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockFunctionThrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockFunctionWritesStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockStaticFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharedAnswer",
    data: BytesLike
  ): Result;
}

export namespace MockFunctionCalledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CallReceiverMock extends BaseContract {
  connect(runner?: ContractRunner | null): CallReceiverMock;
  waitForDeployment(): Promise<this>;

  interface: CallReceiverMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  mockFunction: TypedContractMethod<[], [string], "payable">;

  mockFunctionNonPayable: TypedContractMethod<[], [string], "nonpayable">;

  mockFunctionOutOfGas: TypedContractMethod<[], [void], "payable">;

  mockFunctionRevertsNoReason: TypedContractMethod<[], [void], "payable">;

  mockFunctionRevertsReason: TypedContractMethod<[], [void], "payable">;

  mockFunctionThrows: TypedContractMethod<[], [void], "payable">;

  mockFunctionWritesStorage: TypedContractMethod<[], [string], "nonpayable">;

  mockStaticFunction: TypedContractMethod<[], [string], "view">;

  sharedAnswer: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "mockFunction"
  ): TypedContractMethod<[], [string], "payable">;
  getFunction(
    nameOrSignature: "mockFunctionNonPayable"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "mockFunctionOutOfGas"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "mockFunctionRevertsNoReason"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "mockFunctionRevertsReason"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "mockFunctionThrows"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "mockFunctionWritesStorage"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "mockStaticFunction"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sharedAnswer"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "MockFunctionCalled"
  ): TypedContractEvent<
    MockFunctionCalledEvent.InputTuple,
    MockFunctionCalledEvent.OutputTuple,
    MockFunctionCalledEvent.OutputObject
  >;

  filters: {
    "MockFunctionCalled()": TypedContractEvent<
      MockFunctionCalledEvent.InputTuple,
      MockFunctionCalledEvent.OutputTuple,
      MockFunctionCalledEvent.OutputObject
    >;
    MockFunctionCalled: TypedContractEvent<
      MockFunctionCalledEvent.InputTuple,
      MockFunctionCalledEvent.OutputTuple,
      MockFunctionCalledEvent.OutputObject
    >;
  };
}
