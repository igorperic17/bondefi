/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../../../common";

export interface ReentrancyMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "callback"
      | "countAndCall"
      | "countLocalRecursive"
      | "countThisRecursive"
      | "counter"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "callback", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "countAndCall",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "countLocalRecursive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "countThisRecursive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "counter", values?: undefined): string;

  decodeFunctionResult(functionFragment: "callback", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "countAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countLocalRecursive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countThisRecursive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "counter", data: BytesLike): Result;
}

export interface ReentrancyMock extends BaseContract {
  connect(runner?: ContractRunner | null): ReentrancyMock;
  waitForDeployment(): Promise<this>;

  interface: ReentrancyMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  callback: TypedContractMethod<[], [void], "nonpayable">;

  countAndCall: TypedContractMethod<
    [attacker: AddressLike],
    [void],
    "nonpayable"
  >;

  countLocalRecursive: TypedContractMethod<
    [n: BigNumberish],
    [void],
    "nonpayable"
  >;

  countThisRecursive: TypedContractMethod<
    [n: BigNumberish],
    [void],
    "nonpayable"
  >;

  counter: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "callback"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "countAndCall"
  ): TypedContractMethod<[attacker: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "countLocalRecursive"
  ): TypedContractMethod<[n: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "countThisRecursive"
  ): TypedContractMethod<[n: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "counter"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
