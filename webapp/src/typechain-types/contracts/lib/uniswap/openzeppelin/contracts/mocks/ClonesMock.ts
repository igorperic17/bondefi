/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../../common";

export interface ClonesMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "clone"
      | "cloneDeterministic"
      | "predictDeterministicAddress"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "NewInstance"): EventFragment;

  encodeFunctionData(
    functionFragment: "clone",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cloneDeterministic",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "predictDeterministicAddress",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "clone", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cloneDeterministic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictDeterministicAddress",
    data: BytesLike
  ): Result;
}

export namespace NewInstanceEvent {
  export type InputTuple = [instance: AddressLike];
  export type OutputTuple = [instance: string];
  export interface OutputObject {
    instance: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ClonesMock extends BaseContract {
  connect(runner?: ContractRunner | null): ClonesMock;
  waitForDeployment(): Promise<this>;

  interface: ClonesMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  clone: TypedContractMethod<
    [master: AddressLike, initdata: BytesLike],
    [void],
    "payable"
  >;

  cloneDeterministic: TypedContractMethod<
    [master: AddressLike, salt: BytesLike, initdata: BytesLike],
    [void],
    "payable"
  >;

  predictDeterministicAddress: TypedContractMethod<
    [master: AddressLike, salt: BytesLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "clone"
  ): TypedContractMethod<
    [master: AddressLike, initdata: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "cloneDeterministic"
  ): TypedContractMethod<
    [master: AddressLike, salt: BytesLike, initdata: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "predictDeterministicAddress"
  ): TypedContractMethod<
    [master: AddressLike, salt: BytesLike],
    [string],
    "view"
  >;

  getEvent(
    key: "NewInstance"
  ): TypedContractEvent<
    NewInstanceEvent.InputTuple,
    NewInstanceEvent.OutputTuple,
    NewInstanceEvent.OutputObject
  >;

  filters: {
    "NewInstance(address)": TypedContractEvent<
      NewInstanceEvent.InputTuple,
      NewInstanceEvent.OutputTuple,
      NewInstanceEvent.OutputObject
    >;
    NewInstance: TypedContractEvent<
      NewInstanceEvent.InputTuple,
      NewInstanceEvent.OutputTuple,
      NewInstanceEvent.OutputObject
    >;
  };
}
