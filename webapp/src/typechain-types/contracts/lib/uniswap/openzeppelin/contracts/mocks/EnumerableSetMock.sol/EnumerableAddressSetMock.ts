/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../../../common";

export interface EnumerableAddressSetMockInterface extends Interface {
  getFunction(
    nameOrSignature: "add" | "at" | "contains" | "length" | "remove"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OperationResult"): EventFragment;

  encodeFunctionData(functionFragment: "add", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "at", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "contains",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "length", values?: undefined): string;
  encodeFunctionData(functionFragment: "remove", values: [AddressLike]): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "at", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contains", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "length", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
}

export namespace OperationResultEvent {
  export type InputTuple = [result: boolean];
  export type OutputTuple = [result: boolean];
  export interface OutputObject {
    result: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EnumerableAddressSetMock extends BaseContract {
  connect(runner?: ContractRunner | null): EnumerableAddressSetMock;
  waitForDeployment(): Promise<this>;

  interface: EnumerableAddressSetMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  add: TypedContractMethod<[value: AddressLike], [void], "nonpayable">;

  at: TypedContractMethod<[index: BigNumberish], [string], "view">;

  contains: TypedContractMethod<[value: AddressLike], [boolean], "view">;

  length: TypedContractMethod<[], [bigint], "view">;

  remove: TypedContractMethod<[value: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "add"
  ): TypedContractMethod<[value: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "at"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "contains"
  ): TypedContractMethod<[value: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "length"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "remove"
  ): TypedContractMethod<[value: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OperationResult"
  ): TypedContractEvent<
    OperationResultEvent.InputTuple,
    OperationResultEvent.OutputTuple,
    OperationResultEvent.OutputObject
  >;

  filters: {
    "OperationResult(bool)": TypedContractEvent<
      OperationResultEvent.InputTuple,
      OperationResultEvent.OutputTuple,
      OperationResultEvent.OutputObject
    >;
    OperationResult: TypedContractEvent<
      OperationResultEvent.InputTuple,
      OperationResultEvent.OutputTuple,
      OperationResultEvent.OutputObject
    >;
  };
}
