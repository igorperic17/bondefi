/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../../../../common";

export interface DummyImplementationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "get"
      | "initialize"
      | "initializeNonPayable"
      | "initializeNonPayableWithValue"
      | "initializePayable"
      | "initializePayableWithValue"
      | "reverts"
      | "text"
      | "value"
      | "values"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "get", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeNonPayable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeNonPayableWithValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializePayable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializePayableWithValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "reverts", values?: undefined): string;
  encodeFunctionData(functionFragment: "text", values?: undefined): string;
  encodeFunctionData(functionFragment: "value", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "values",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeNonPayable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeNonPayableWithValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializePayable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializePayableWithValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reverts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "text", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "value", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "values", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export interface DummyImplementation extends BaseContract {
  connect(runner?: ContractRunner | null): DummyImplementation;
  waitForDeployment(): Promise<this>;

  interface: DummyImplementationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  get: TypedContractMethod<[], [boolean], "view">;

  initialize: TypedContractMethod<
    [_value: BigNumberish, _text: string, _values: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  initializeNonPayable: TypedContractMethod<[], [void], "nonpayable">;

  initializeNonPayableWithValue: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  initializePayable: TypedContractMethod<[], [void], "payable">;

  initializePayableWithValue: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "payable"
  >;

  reverts: TypedContractMethod<[], [void], "view">;

  text: TypedContractMethod<[], [string], "view">;

  value: TypedContractMethod<[], [bigint], "view">;

  values: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "get"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_value: BigNumberish, _text: string, _values: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initializeNonPayable"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initializeNonPayableWithValue"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initializePayable"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "initializePayableWithValue"
  ): TypedContractMethod<[_value: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "reverts"
  ): TypedContractMethod<[], [void], "view">;
  getFunction(
    nameOrSignature: "text"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "value"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "values"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
