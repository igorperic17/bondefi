/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../../common";

export interface GSNRecipientMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptRelayedCall"
      | "getHubAddr"
      | "msgData"
      | "msgSender"
      | "postRelayedCall"
      | "preRelayedCall"
      | "relayHubVersion"
      | "upgradeRelayHub"
      | "withdrawDeposits"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Data" | "RelayHubChanged" | "Sender"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptRelayedCall",
    values: [
      AddressLike,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getHubAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "msgData",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "msgSender", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "postRelayedCall",
    values: [BytesLike, boolean, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "preRelayedCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "relayHubVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeRelayHub",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDeposits",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHubAddr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "msgData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "msgSender", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayHubVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeRelayHub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDeposits",
    data: BytesLike
  ): Result;
}

export namespace DataEvent {
  export type InputTuple = [
    data: BytesLike,
    integerValue: BigNumberish,
    stringValue: string
  ];
  export type OutputTuple = [
    data: string,
    integerValue: bigint,
    stringValue: string
  ];
  export interface OutputObject {
    data: string;
    integerValue: bigint;
    stringValue: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelayHubChangedEvent {
  export type InputTuple = [oldRelayHub: AddressLike, newRelayHub: AddressLike];
  export type OutputTuple = [oldRelayHub: string, newRelayHub: string];
  export interface OutputObject {
    oldRelayHub: string;
    newRelayHub: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SenderEvent {
  export type InputTuple = [sender: AddressLike];
  export type OutputTuple = [sender: string];
  export interface OutputObject {
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GSNRecipientMock extends BaseContract {
  connect(runner?: ContractRunner | null): GSNRecipientMock;
  waitForDeployment(): Promise<this>;

  interface: GSNRecipientMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptRelayedCall: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BytesLike,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: BytesLike,
      arg8: BigNumberish
    ],
    [[bigint, string]],
    "view"
  >;

  getHubAddr: TypedContractMethod<[], [string], "view">;

  msgData: TypedContractMethod<
    [integerValue: BigNumberish, stringValue: string],
    [void],
    "nonpayable"
  >;

  msgSender: TypedContractMethod<[], [void], "nonpayable">;

  postRelayedCall: TypedContractMethod<
    [
      context: BytesLike,
      success: boolean,
      actualCharge: BigNumberish,
      preRetVal: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  preRelayedCall: TypedContractMethod<
    [context: BytesLike],
    [string],
    "nonpayable"
  >;

  relayHubVersion: TypedContractMethod<[], [string], "view">;

  upgradeRelayHub: TypedContractMethod<
    [newRelayHub: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawDeposits: TypedContractMethod<
    [amount: BigNumberish, payee: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptRelayedCall"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BytesLike,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: BytesLike,
      arg8: BigNumberish
    ],
    [[bigint, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHubAddr"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "msgData"
  ): TypedContractMethod<
    [integerValue: BigNumberish, stringValue: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "msgSender"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "postRelayedCall"
  ): TypedContractMethod<
    [
      context: BytesLike,
      success: boolean,
      actualCharge: BigNumberish,
      preRetVal: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "preRelayedCall"
  ): TypedContractMethod<[context: BytesLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "relayHubVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "upgradeRelayHub"
  ): TypedContractMethod<[newRelayHub: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawDeposits"
  ): TypedContractMethod<
    [amount: BigNumberish, payee: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Data"
  ): TypedContractEvent<
    DataEvent.InputTuple,
    DataEvent.OutputTuple,
    DataEvent.OutputObject
  >;
  getEvent(
    key: "RelayHubChanged"
  ): TypedContractEvent<
    RelayHubChangedEvent.InputTuple,
    RelayHubChangedEvent.OutputTuple,
    RelayHubChangedEvent.OutputObject
  >;
  getEvent(
    key: "Sender"
  ): TypedContractEvent<
    SenderEvent.InputTuple,
    SenderEvent.OutputTuple,
    SenderEvent.OutputObject
  >;

  filters: {
    "Data(bytes,uint256,string)": TypedContractEvent<
      DataEvent.InputTuple,
      DataEvent.OutputTuple,
      DataEvent.OutputObject
    >;
    Data: TypedContractEvent<
      DataEvent.InputTuple,
      DataEvent.OutputTuple,
      DataEvent.OutputObject
    >;

    "RelayHubChanged(address,address)": TypedContractEvent<
      RelayHubChangedEvent.InputTuple,
      RelayHubChangedEvent.OutputTuple,
      RelayHubChangedEvent.OutputObject
    >;
    RelayHubChanged: TypedContractEvent<
      RelayHubChangedEvent.InputTuple,
      RelayHubChangedEvent.OutputTuple,
      RelayHubChangedEvent.OutputObject
    >;

    "Sender(address)": TypedContractEvent<
      SenderEvent.InputTuple,
      SenderEvent.OutputTuple,
      SenderEvent.OutputObject
    >;
    Sender: TypedContractEvent<
      SenderEvent.InputTuple,
      SenderEvent.OutputTuple,
      SenderEvent.OutputObject
    >;
  };
}
