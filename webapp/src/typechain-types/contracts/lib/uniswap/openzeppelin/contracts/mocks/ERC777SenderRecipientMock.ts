/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../../common";

export interface ERC777SenderRecipientMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "burn"
      | "canImplementInterfaceForAddress"
      | "recipientFor"
      | "registerRecipient"
      | "registerSender"
      | "send"
      | "senderFor"
      | "setShouldRevertReceive"
      | "setShouldRevertSend"
      | "tokensReceived"
      | "tokensToSend"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BeforeTokenTransfer"
      | "TokensReceivedCalled"
      | "TokensToSendCalled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "burn",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canImplementInterfaceForAddress",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recipientFor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSender",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "senderFor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setShouldRevertReceive",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setShouldRevertSend",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensReceived",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensToSend",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canImplementInterfaceForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recipientFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "senderFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setShouldRevertReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setShouldRevertSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensToSend",
    data: BytesLike
  ): Result;
}

export namespace BeforeTokenTransferEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensReceivedCalledEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    token: AddressLike,
    fromBalance: BigNumberish,
    toBalance: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    amount: bigint,
    data: string,
    operatorData: string,
    token: string,
    fromBalance: bigint,
    toBalance: bigint
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    amount: bigint;
    data: string;
    operatorData: string;
    token: string;
    fromBalance: bigint;
    toBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensToSendCalledEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    token: AddressLike,
    fromBalance: BigNumberish,
    toBalance: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    amount: bigint,
    data: string,
    operatorData: string,
    token: string,
    fromBalance: bigint,
    toBalance: bigint
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    amount: bigint;
    data: string;
    operatorData: string;
    token: string;
    fromBalance: bigint;
    toBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ERC777SenderRecipientMock extends BaseContract {
  connect(runner?: ContractRunner | null): ERC777SenderRecipientMock;
  waitForDeployment(): Promise<this>;

  interface: ERC777SenderRecipientMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  burn: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  canImplementInterfaceForAddress: TypedContractMethod<
    [interfaceHash: BytesLike, account: AddressLike],
    [string],
    "view"
  >;

  recipientFor: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  registerRecipient: TypedContractMethod<
    [recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  registerSender: TypedContractMethod<
    [sender: AddressLike],
    [void],
    "nonpayable"
  >;

  send: TypedContractMethod<
    [
      token: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  senderFor: TypedContractMethod<[account: AddressLike], [void], "nonpayable">;

  setShouldRevertReceive: TypedContractMethod<
    [shouldRevert: boolean],
    [void],
    "nonpayable"
  >;

  setShouldRevertSend: TypedContractMethod<
    [shouldRevert: boolean],
    [void],
    "nonpayable"
  >;

  tokensReceived: TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  tokensToSend: TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "canImplementInterfaceForAddress"
  ): TypedContractMethod<
    [interfaceHash: BytesLike, account: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "recipientFor"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerRecipient"
  ): TypedContractMethod<[recipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerSender"
  ): TypedContractMethod<[sender: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "send"
  ): TypedContractMethod<
    [
      token: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "senderFor"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setShouldRevertReceive"
  ): TypedContractMethod<[shouldRevert: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setShouldRevertSend"
  ): TypedContractMethod<[shouldRevert: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokensReceived"
  ): TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokensToSend"
  ): TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BeforeTokenTransfer"
  ): TypedContractEvent<
    BeforeTokenTransferEvent.InputTuple,
    BeforeTokenTransferEvent.OutputTuple,
    BeforeTokenTransferEvent.OutputObject
  >;
  getEvent(
    key: "TokensReceivedCalled"
  ): TypedContractEvent<
    TokensReceivedCalledEvent.InputTuple,
    TokensReceivedCalledEvent.OutputTuple,
    TokensReceivedCalledEvent.OutputObject
  >;
  getEvent(
    key: "TokensToSendCalled"
  ): TypedContractEvent<
    TokensToSendCalledEvent.InputTuple,
    TokensToSendCalledEvent.OutputTuple,
    TokensToSendCalledEvent.OutputObject
  >;

  filters: {
    "BeforeTokenTransfer()": TypedContractEvent<
      BeforeTokenTransferEvent.InputTuple,
      BeforeTokenTransferEvent.OutputTuple,
      BeforeTokenTransferEvent.OutputObject
    >;
    BeforeTokenTransfer: TypedContractEvent<
      BeforeTokenTransferEvent.InputTuple,
      BeforeTokenTransferEvent.OutputTuple,
      BeforeTokenTransferEvent.OutputObject
    >;

    "TokensReceivedCalled(address,address,address,uint256,bytes,bytes,address,uint256,uint256)": TypedContractEvent<
      TokensReceivedCalledEvent.InputTuple,
      TokensReceivedCalledEvent.OutputTuple,
      TokensReceivedCalledEvent.OutputObject
    >;
    TokensReceivedCalled: TypedContractEvent<
      TokensReceivedCalledEvent.InputTuple,
      TokensReceivedCalledEvent.OutputTuple,
      TokensReceivedCalledEvent.OutputObject
    >;

    "TokensToSendCalled(address,address,address,uint256,bytes,bytes,address,uint256,uint256)": TypedContractEvent<
      TokensToSendCalledEvent.InputTuple,
      TokensToSendCalledEvent.OutputTuple,
      TokensToSendCalledEvent.OutputObject
    >;
    TokensToSendCalled: TypedContractEvent<
      TokensToSendCalledEvent.InputTuple,
      TokensToSendCalledEvent.OutputTuple,
      TokensToSendCalledEvent.OutputObject
    >;
  };
}
