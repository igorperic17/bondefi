/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../../../common";

export interface ContextMockInterface extends Interface {
  getFunction(nameOrSignature: "msgData" | "msgSender"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Data" | "Sender"): EventFragment;

  encodeFunctionData(
    functionFragment: "msgData",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "msgSender", values?: undefined): string;

  decodeFunctionResult(functionFragment: "msgData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "msgSender", data: BytesLike): Result;
}

export namespace DataEvent {
  export type InputTuple = [
    data: BytesLike,
    integerValue: BigNumberish,
    stringValue: string
  ];
  export type OutputTuple = [
    data: string,
    integerValue: bigint,
    stringValue: string
  ];
  export interface OutputObject {
    data: string;
    integerValue: bigint;
    stringValue: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SenderEvent {
  export type InputTuple = [sender: AddressLike];
  export type OutputTuple = [sender: string];
  export interface OutputObject {
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ContextMock extends BaseContract {
  connect(runner?: ContractRunner | null): ContextMock;
  waitForDeployment(): Promise<this>;

  interface: ContextMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  msgData: TypedContractMethod<
    [integerValue: BigNumberish, stringValue: string],
    [void],
    "nonpayable"
  >;

  msgSender: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "msgData"
  ): TypedContractMethod<
    [integerValue: BigNumberish, stringValue: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "msgSender"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Data"
  ): TypedContractEvent<
    DataEvent.InputTuple,
    DataEvent.OutputTuple,
    DataEvent.OutputObject
  >;
  getEvent(
    key: "Sender"
  ): TypedContractEvent<
    SenderEvent.InputTuple,
    SenderEvent.OutputTuple,
    SenderEvent.OutputObject
  >;

  filters: {
    "Data(bytes,uint256,string)": TypedContractEvent<
      DataEvent.InputTuple,
      DataEvent.OutputTuple,
      DataEvent.OutputObject
    >;
    Data: TypedContractEvent<
      DataEvent.InputTuple,
      DataEvent.OutputTuple,
      DataEvent.OutputObject
    >;

    "Sender(address)": TypedContractEvent<
      SenderEvent.InputTuple,
      SenderEvent.OutputTuple,
      SenderEvent.OutputObject
    >;
    Sender: TypedContractEvent<
      SenderEvent.InputTuple,
      SenderEvent.OutputTuple,
      SenderEvent.OutputObject
    >;
  };
}
