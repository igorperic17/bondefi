/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface BatchedMarketMakerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "OPEN_ROLE"
      | "PCT_BASE"
      | "PPM"
      | "addCollateralToken"
      | "batchBlocks"
      | "batches"
      | "beneficiary"
      | "buyFeePct"
      | "claimBuyOrder"
      | "claimCancelledBuyOrder"
      | "claimCancelledSellOrder"
      | "claimSellOrder"
      | "collaterals"
      | "collateralsToBeClaimed"
      | "curveSupply"
      | "formula"
      | "getBatch"
      | "getCollateralPricePPM"
      | "getCollateralToken"
      | "getCurrentBatchId"
      | "getRoleAdmin"
      | "getStaticPricePPM"
      | "grantRole"
      | "hasRole"
      | "isOpen"
      | "minCurveSupply"
      | "open"
      | "openBuyOrder"
      | "openSellOrder"
      | "removeCollateralToken"
      | "renounceRole"
      | "revokeRole"
      | "sellFeePct"
      | "startingPrice"
      | "supportsInterface"
      | "token"
      | "tokensToBeMinted"
      | "updateBeneficiary"
      | "updateCollateralToken"
      | "updateCurveSupply"
      | "updateFees"
      | "updateFormula"
      | "updateMinCurveSupply"
      | "withdrawCollateral"
      | "withdrawNFT"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddCollateralToken"
      | "CancelBatch"
      | "ClaimBuyOrder"
      | "ClaimCancelledBuyOrder"
      | "ClaimCancelledSellOrder"
      | "ClaimSellOrder"
      | "NewBatch(uint256,uint256,uint256,uint256,address)"
      | "NewBatch(uint256,address,uint256,uint256,uint32,uint256)"
      | "Open"
      | "OpenBuyOrder"
      | "OpenSellOrder"
      | "RemoveCollateralToken"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "UpdateBeneficiary"
      | "UpdateCollateralToken"
      | "UpdateFees"
      | "UpdateFormula"
      | "UpdatePricing"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "OPEN_ROLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "PCT_BASE", values?: undefined): string;
  encodeFunctionData(functionFragment: "PPM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addCollateralToken",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "buyFeePct", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimBuyOrder",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCancelledBuyOrder",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCancelledSellOrder",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSellOrder",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collaterals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralsToBeClaimed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "curveSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "formula", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBatch",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralPricePPM",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBatchId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStaticPricePPM",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "isOpen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minCurveSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "open", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "openBuyOrder",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openSellOrder",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateralToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sellFeePct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startingPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokensToBeMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateBeneficiary",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCollateralToken",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCurveSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFees",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFormula",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinCurveSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNFT",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OPEN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PCT_BASE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PPM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batches", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyFeePct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimBuyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCancelledBuyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCancelledSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collaterals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralsToBeClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curveSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "formula", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralPricePPM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBatchId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStaticPricePPM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOpen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minCurveSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openBuyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellFeePct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensToBeMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCurveSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFormula",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinCurveSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNFT",
    data: BytesLike
  ): Result;
}

export namespace AddCollateralTokenEvent {
  export type InputTuple = [
    collateral: AddressLike,
    virtualSupply: BigNumberish,
    virtualBalance: BigNumberish,
    reserveRatio: BigNumberish,
    slippage: BigNumberish
  ];
  export type OutputTuple = [
    collateral: string,
    virtualSupply: bigint,
    virtualBalance: bigint,
    reserveRatio: bigint,
    slippage: bigint
  ];
  export interface OutputObject {
    collateral: string;
    virtualSupply: bigint;
    virtualBalance: bigint;
    reserveRatio: bigint;
    slippage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancelBatchEvent {
  export type InputTuple = [id: BigNumberish, collateral: AddressLike];
  export type OutputTuple = [id: bigint, collateral: string];
  export interface OutputObject {
    id: bigint;
    collateral: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimBuyOrderEvent {
  export type InputTuple = [
    buyer: AddressLike,
    batchId: BigNumberish,
    collateral: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    batchId: bigint,
    collateral: string,
    amount: bigint
  ];
  export interface OutputObject {
    buyer: string;
    batchId: bigint;
    collateral: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimCancelledBuyOrderEvent {
  export type InputTuple = [
    buyer: AddressLike,
    batchId: BigNumberish,
    collateral: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    batchId: bigint,
    collateral: string,
    value: bigint
  ];
  export interface OutputObject {
    buyer: string;
    batchId: bigint;
    collateral: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimCancelledSellOrderEvent {
  export type InputTuple = [
    seller: AddressLike,
    batchId: BigNumberish,
    collateral: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    seller: string,
    batchId: bigint,
    collateral: string,
    amount: bigint
  ];
  export interface OutputObject {
    seller: string;
    batchId: bigint;
    collateral: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimSellOrderEvent {
  export type InputTuple = [
    seller: AddressLike,
    batchId: BigNumberish,
    collateral: AddressLike,
    fee: BigNumberish,
    value: BigNumberish
  ];
  export type OutputTuple = [
    seller: string,
    batchId: bigint,
    collateral: string,
    fee: bigint,
    value: bigint
  ];
  export interface OutputObject {
    seller: string;
    batchId: bigint;
    collateral: string;
    fee: bigint;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewBatch_uint256_uint256_uint256_uint256_address_Event {
  export type InputTuple = [
    id: BigNumberish,
    supply: BigNumberish,
    buyFeePct: BigNumberish,
    sellFeePct: BigNumberish,
    formula: AddressLike
  ];
  export type OutputTuple = [
    id: bigint,
    supply: bigint,
    buyFeePct: bigint,
    sellFeePct: bigint,
    formula: string
  ];
  export interface OutputObject {
    id: bigint;
    supply: bigint;
    buyFeePct: bigint;
    sellFeePct: bigint;
    formula: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewBatch_uint256_address_uint256_uint256_uint32_uint256_Event {
  export type InputTuple = [
    id: BigNumberish,
    collateral: AddressLike,
    supply: BigNumberish,
    balance: BigNumberish,
    reserveRatio: BigNumberish,
    slippage: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    collateral: string,
    supply: bigint,
    balance: bigint,
    reserveRatio: bigint,
    slippage: bigint
  ];
  export interface OutputObject {
    id: bigint;
    collateral: string;
    supply: bigint;
    balance: bigint;
    reserveRatio: bigint;
    slippage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OpenEvent {
  export type InputTuple = [status: boolean];
  export type OutputTuple = [status: boolean];
  export interface OutputObject {
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OpenBuyOrderEvent {
  export type InputTuple = [
    buyer: AddressLike,
    batchId: BigNumberish,
    collateral: AddressLike,
    fee: BigNumberish,
    value: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    batchId: bigint,
    collateral: string,
    fee: bigint,
    value: bigint
  ];
  export interface OutputObject {
    buyer: string;
    batchId: bigint;
    collateral: string;
    fee: bigint;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OpenSellOrderEvent {
  export type InputTuple = [
    seller: AddressLike,
    batchId: BigNumberish,
    collateral: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    seller: string,
    batchId: bigint,
    collateral: string,
    amount: bigint
  ];
  export interface OutputObject {
    seller: string;
    batchId: bigint;
    collateral: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveCollateralTokenEvent {
  export type InputTuple = [collateral: AddressLike];
  export type OutputTuple = [collateral: string];
  export interface OutputObject {
    collateral: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateBeneficiaryEvent {
  export type InputTuple = [beneficiary: AddressLike];
  export type OutputTuple = [beneficiary: string];
  export interface OutputObject {
    beneficiary: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateCollateralTokenEvent {
  export type InputTuple = [
    collateral: AddressLike,
    virtualSupply: BigNumberish,
    virtualBalance: BigNumberish,
    reserveRatio: BigNumberish,
    slippage: BigNumberish
  ];
  export type OutputTuple = [
    collateral: string,
    virtualSupply: bigint,
    virtualBalance: bigint,
    reserveRatio: bigint,
    slippage: bigint
  ];
  export interface OutputObject {
    collateral: string;
    virtualSupply: bigint;
    virtualBalance: bigint;
    reserveRatio: bigint;
    slippage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateFeesEvent {
  export type InputTuple = [buyFeePct: BigNumberish, sellFeePct: BigNumberish];
  export type OutputTuple = [buyFeePct: bigint, sellFeePct: bigint];
  export interface OutputObject {
    buyFeePct: bigint;
    sellFeePct: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateFormulaEvent {
  export type InputTuple = [formula: AddressLike];
  export type OutputTuple = [formula: string];
  export interface OutputObject {
    formula: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatePricingEvent {
  export type InputTuple = [
    batchId: BigNumberish,
    collateral: AddressLike,
    totalBuySpend: BigNumberish,
    totalBuyReturn: BigNumberish,
    totalSellSpend: BigNumberish,
    totalSellReturn: BigNumberish
  ];
  export type OutputTuple = [
    batchId: bigint,
    collateral: string,
    totalBuySpend: bigint,
    totalBuyReturn: bigint,
    totalSellSpend: bigint,
    totalSellReturn: bigint
  ];
  export interface OutputObject {
    batchId: bigint;
    collateral: string;
    totalBuySpend: bigint;
    totalBuyReturn: bigint;
    totalSellSpend: bigint;
    totalSellReturn: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BatchedMarketMaker extends BaseContract {
  connect(runner?: ContractRunner | null): BatchedMarketMaker;
  waitForDeployment(): Promise<this>;

  interface: BatchedMarketMakerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  OPEN_ROLE: TypedContractMethod<[], [string], "view">;

  PCT_BASE: TypedContractMethod<[], [bigint], "view">;

  PPM: TypedContractMethod<[], [bigint], "view">;

  addCollateralToken: TypedContractMethod<
    [
      _collateral: AddressLike,
      _virtualSupply: BigNumberish,
      _virtualBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _slippage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  batchBlocks: TypedContractMethod<[], [bigint], "view">;

  batches: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, bigint, bigint, bigint, string] & {
        initialized: boolean;
        realSupply: bigint;
        buyFeePct: bigint;
        sellFeePct: bigint;
        formula: string;
      }
    ],
    "view"
  >;

  beneficiary: TypedContractMethod<[], [string], "view">;

  buyFeePct: TypedContractMethod<[], [bigint], "view">;

  claimBuyOrder: TypedContractMethod<
    [_buyer: AddressLike, _batchId: BigNumberish, _collateral: AddressLike],
    [void],
    "nonpayable"
  >;

  claimCancelledBuyOrder: TypedContractMethod<
    [_buyer: AddressLike, _batchId: BigNumberish, _collateral: AddressLike],
    [void],
    "nonpayable"
  >;

  claimCancelledSellOrder: TypedContractMethod<
    [_seller: AddressLike, _batchId: BigNumberish, _collateral: AddressLike],
    [void],
    "nonpayable"
  >;

  claimSellOrder: TypedContractMethod<
    [_seller: AddressLike, _batchId: BigNumberish, _collateral: AddressLike],
    [void],
    "nonpayable"
  >;

  collaterals: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, bigint, bigint] & {
        whitelisted: boolean;
        virtualSupply: bigint;
        virtualBalance: bigint;
        reserveRatio: bigint;
        slippage: bigint;
      }
    ],
    "view"
  >;

  collateralsToBeClaimed: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  curveSupply: TypedContractMethod<[], [bigint], "view">;

  formula: TypedContractMethod<[], [string], "view">;

  getBatch: TypedContractMethod<
    [_batchId: BigNumberish, _collateral: AddressLike],
    [
      [
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ]
    ],
    "view"
  >;

  getCollateralPricePPM: TypedContractMethod<
    [_collateral: AddressLike],
    [bigint],
    "view"
  >;

  getCollateralToken: TypedContractMethod<
    [_collateral: AddressLike],
    [[boolean, bigint, bigint, bigint, bigint]],
    "view"
  >;

  getCurrentBatchId: TypedContractMethod<[], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getStaticPricePPM: TypedContractMethod<
    [
      _supply: BigNumberish,
      _balance: BigNumberish,
      _reserveRatio: BigNumberish
    ],
    [bigint],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isOpen: TypedContractMethod<[], [boolean], "view">;

  minCurveSupply: TypedContractMethod<[], [bigint], "view">;

  open: TypedContractMethod<[_status: boolean], [void], "nonpayable">;

  openBuyOrder: TypedContractMethod<
    [_buyer: AddressLike, _collateral: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;

  openSellOrder: TypedContractMethod<
    [_seller: AddressLike, _collateral: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeCollateralToken: TypedContractMethod<
    [_collateral: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  sellFeePct: TypedContractMethod<[], [bigint], "view">;

  startingPrice: TypedContractMethod<[], [bigint], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  token: TypedContractMethod<[], [string], "view">;

  tokensToBeMinted: TypedContractMethod<[], [bigint], "view">;

  updateBeneficiary: TypedContractMethod<
    [_beneficiary: AddressLike],
    [void],
    "nonpayable"
  >;

  updateCollateralToken: TypedContractMethod<
    [
      _collateral: AddressLike,
      _virtualSupply: BigNumberish,
      _virtualBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _slippage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateCurveSupply: TypedContractMethod<
    [_supply: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateFees: TypedContractMethod<
    [_buyFeePct: BigNumberish, _sellFeePct: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateFormula: TypedContractMethod<
    [_formula: AddressLike],
    [void],
    "nonpayable"
  >;

  updateMinCurveSupply: TypedContractMethod<
    [_minSupply: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawCollateral: TypedContractMethod<
    [_collateral: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawNFT: TypedContractMethod<
    [_token: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OPEN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PCT_BASE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PPM"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addCollateralToken"
  ): TypedContractMethod<
    [
      _collateral: AddressLike,
      _virtualSupply: BigNumberish,
      _virtualBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _slippage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchBlocks"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "batches"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, bigint, bigint, bigint, string] & {
        initialized: boolean;
        realSupply: bigint;
        buyFeePct: bigint;
        sellFeePct: bigint;
        formula: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "beneficiary"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "buyFeePct"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimBuyOrder"
  ): TypedContractMethod<
    [_buyer: AddressLike, _batchId: BigNumberish, _collateral: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimCancelledBuyOrder"
  ): TypedContractMethod<
    [_buyer: AddressLike, _batchId: BigNumberish, _collateral: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimCancelledSellOrder"
  ): TypedContractMethod<
    [_seller: AddressLike, _batchId: BigNumberish, _collateral: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimSellOrder"
  ): TypedContractMethod<
    [_seller: AddressLike, _batchId: BigNumberish, _collateral: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collaterals"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, bigint, bigint] & {
        whitelisted: boolean;
        virtualSupply: bigint;
        virtualBalance: bigint;
        reserveRatio: bigint;
        slippage: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "collateralsToBeClaimed"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "curveSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "formula"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBatch"
  ): TypedContractMethod<
    [_batchId: BigNumberish, _collateral: AddressLike],
    [
      [
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ]
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCollateralPricePPM"
  ): TypedContractMethod<[_collateral: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCollateralToken"
  ): TypedContractMethod<
    [_collateral: AddressLike],
    [[boolean, bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentBatchId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getStaticPricePPM"
  ): TypedContractMethod<
    [
      _supply: BigNumberish,
      _balance: BigNumberish,
      _reserveRatio: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isOpen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "minCurveSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "open"
  ): TypedContractMethod<[_status: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "openBuyOrder"
  ): TypedContractMethod<
    [_buyer: AddressLike, _collateral: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "openSellOrder"
  ): TypedContractMethod<
    [_seller: AddressLike, _collateral: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeCollateralToken"
  ): TypedContractMethod<[_collateral: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sellFeePct"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "startingPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokensToBeMinted"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateBeneficiary"
  ): TypedContractMethod<[_beneficiary: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCollateralToken"
  ): TypedContractMethod<
    [
      _collateral: AddressLike,
      _virtualSupply: BigNumberish,
      _virtualBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _slippage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateCurveSupply"
  ): TypedContractMethod<[_supply: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFees"
  ): TypedContractMethod<
    [_buyFeePct: BigNumberish, _sellFeePct: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateFormula"
  ): TypedContractMethod<[_formula: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMinCurveSupply"
  ): TypedContractMethod<[_minSupply: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawCollateral"
  ): TypedContractMethod<
    [_collateral: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawNFT"
  ): TypedContractMethod<
    [_token: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AddCollateralToken"
  ): TypedContractEvent<
    AddCollateralTokenEvent.InputTuple,
    AddCollateralTokenEvent.OutputTuple,
    AddCollateralTokenEvent.OutputObject
  >;
  getEvent(
    key: "CancelBatch"
  ): TypedContractEvent<
    CancelBatchEvent.InputTuple,
    CancelBatchEvent.OutputTuple,
    CancelBatchEvent.OutputObject
  >;
  getEvent(
    key: "ClaimBuyOrder"
  ): TypedContractEvent<
    ClaimBuyOrderEvent.InputTuple,
    ClaimBuyOrderEvent.OutputTuple,
    ClaimBuyOrderEvent.OutputObject
  >;
  getEvent(
    key: "ClaimCancelledBuyOrder"
  ): TypedContractEvent<
    ClaimCancelledBuyOrderEvent.InputTuple,
    ClaimCancelledBuyOrderEvent.OutputTuple,
    ClaimCancelledBuyOrderEvent.OutputObject
  >;
  getEvent(
    key: "ClaimCancelledSellOrder"
  ): TypedContractEvent<
    ClaimCancelledSellOrderEvent.InputTuple,
    ClaimCancelledSellOrderEvent.OutputTuple,
    ClaimCancelledSellOrderEvent.OutputObject
  >;
  getEvent(
    key: "ClaimSellOrder"
  ): TypedContractEvent<
    ClaimSellOrderEvent.InputTuple,
    ClaimSellOrderEvent.OutputTuple,
    ClaimSellOrderEvent.OutputObject
  >;
  getEvent(
    key: "NewBatch(uint256,uint256,uint256,uint256,address)"
  ): TypedContractEvent<
    NewBatch_uint256_uint256_uint256_uint256_address_Event.InputTuple,
    NewBatch_uint256_uint256_uint256_uint256_address_Event.OutputTuple,
    NewBatch_uint256_uint256_uint256_uint256_address_Event.OutputObject
  >;
  getEvent(
    key: "NewBatch(uint256,address,uint256,uint256,uint32,uint256)"
  ): TypedContractEvent<
    NewBatch_uint256_address_uint256_uint256_uint32_uint256_Event.InputTuple,
    NewBatch_uint256_address_uint256_uint256_uint32_uint256_Event.OutputTuple,
    NewBatch_uint256_address_uint256_uint256_uint32_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Open"
  ): TypedContractEvent<
    OpenEvent.InputTuple,
    OpenEvent.OutputTuple,
    OpenEvent.OutputObject
  >;
  getEvent(
    key: "OpenBuyOrder"
  ): TypedContractEvent<
    OpenBuyOrderEvent.InputTuple,
    OpenBuyOrderEvent.OutputTuple,
    OpenBuyOrderEvent.OutputObject
  >;
  getEvent(
    key: "OpenSellOrder"
  ): TypedContractEvent<
    OpenSellOrderEvent.InputTuple,
    OpenSellOrderEvent.OutputTuple,
    OpenSellOrderEvent.OutputObject
  >;
  getEvent(
    key: "RemoveCollateralToken"
  ): TypedContractEvent<
    RemoveCollateralTokenEvent.InputTuple,
    RemoveCollateralTokenEvent.OutputTuple,
    RemoveCollateralTokenEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "UpdateBeneficiary"
  ): TypedContractEvent<
    UpdateBeneficiaryEvent.InputTuple,
    UpdateBeneficiaryEvent.OutputTuple,
    UpdateBeneficiaryEvent.OutputObject
  >;
  getEvent(
    key: "UpdateCollateralToken"
  ): TypedContractEvent<
    UpdateCollateralTokenEvent.InputTuple,
    UpdateCollateralTokenEvent.OutputTuple,
    UpdateCollateralTokenEvent.OutputObject
  >;
  getEvent(
    key: "UpdateFees"
  ): TypedContractEvent<
    UpdateFeesEvent.InputTuple,
    UpdateFeesEvent.OutputTuple,
    UpdateFeesEvent.OutputObject
  >;
  getEvent(
    key: "UpdateFormula"
  ): TypedContractEvent<
    UpdateFormulaEvent.InputTuple,
    UpdateFormulaEvent.OutputTuple,
    UpdateFormulaEvent.OutputObject
  >;
  getEvent(
    key: "UpdatePricing"
  ): TypedContractEvent<
    UpdatePricingEvent.InputTuple,
    UpdatePricingEvent.OutputTuple,
    UpdatePricingEvent.OutputObject
  >;

  filters: {
    "AddCollateralToken(address,uint256,uint256,uint32,uint256)": TypedContractEvent<
      AddCollateralTokenEvent.InputTuple,
      AddCollateralTokenEvent.OutputTuple,
      AddCollateralTokenEvent.OutputObject
    >;
    AddCollateralToken: TypedContractEvent<
      AddCollateralTokenEvent.InputTuple,
      AddCollateralTokenEvent.OutputTuple,
      AddCollateralTokenEvent.OutputObject
    >;

    "CancelBatch(uint256,address)": TypedContractEvent<
      CancelBatchEvent.InputTuple,
      CancelBatchEvent.OutputTuple,
      CancelBatchEvent.OutputObject
    >;
    CancelBatch: TypedContractEvent<
      CancelBatchEvent.InputTuple,
      CancelBatchEvent.OutputTuple,
      CancelBatchEvent.OutputObject
    >;

    "ClaimBuyOrder(address,uint256,address,uint256)": TypedContractEvent<
      ClaimBuyOrderEvent.InputTuple,
      ClaimBuyOrderEvent.OutputTuple,
      ClaimBuyOrderEvent.OutputObject
    >;
    ClaimBuyOrder: TypedContractEvent<
      ClaimBuyOrderEvent.InputTuple,
      ClaimBuyOrderEvent.OutputTuple,
      ClaimBuyOrderEvent.OutputObject
    >;

    "ClaimCancelledBuyOrder(address,uint256,address,uint256)": TypedContractEvent<
      ClaimCancelledBuyOrderEvent.InputTuple,
      ClaimCancelledBuyOrderEvent.OutputTuple,
      ClaimCancelledBuyOrderEvent.OutputObject
    >;
    ClaimCancelledBuyOrder: TypedContractEvent<
      ClaimCancelledBuyOrderEvent.InputTuple,
      ClaimCancelledBuyOrderEvent.OutputTuple,
      ClaimCancelledBuyOrderEvent.OutputObject
    >;

    "ClaimCancelledSellOrder(address,uint256,address,uint256)": TypedContractEvent<
      ClaimCancelledSellOrderEvent.InputTuple,
      ClaimCancelledSellOrderEvent.OutputTuple,
      ClaimCancelledSellOrderEvent.OutputObject
    >;
    ClaimCancelledSellOrder: TypedContractEvent<
      ClaimCancelledSellOrderEvent.InputTuple,
      ClaimCancelledSellOrderEvent.OutputTuple,
      ClaimCancelledSellOrderEvent.OutputObject
    >;

    "ClaimSellOrder(address,uint256,address,uint256,uint256)": TypedContractEvent<
      ClaimSellOrderEvent.InputTuple,
      ClaimSellOrderEvent.OutputTuple,
      ClaimSellOrderEvent.OutputObject
    >;
    ClaimSellOrder: TypedContractEvent<
      ClaimSellOrderEvent.InputTuple,
      ClaimSellOrderEvent.OutputTuple,
      ClaimSellOrderEvent.OutputObject
    >;

    "NewBatch(uint256,uint256,uint256,uint256,address)": TypedContractEvent<
      NewBatch_uint256_uint256_uint256_uint256_address_Event.InputTuple,
      NewBatch_uint256_uint256_uint256_uint256_address_Event.OutputTuple,
      NewBatch_uint256_uint256_uint256_uint256_address_Event.OutputObject
    >;
    "NewBatch(uint256,address,uint256,uint256,uint32,uint256)": TypedContractEvent<
      NewBatch_uint256_address_uint256_uint256_uint32_uint256_Event.InputTuple,
      NewBatch_uint256_address_uint256_uint256_uint32_uint256_Event.OutputTuple,
      NewBatch_uint256_address_uint256_uint256_uint32_uint256_Event.OutputObject
    >;

    "Open(bool)": TypedContractEvent<
      OpenEvent.InputTuple,
      OpenEvent.OutputTuple,
      OpenEvent.OutputObject
    >;
    Open: TypedContractEvent<
      OpenEvent.InputTuple,
      OpenEvent.OutputTuple,
      OpenEvent.OutputObject
    >;

    "OpenBuyOrder(address,uint256,address,uint256,uint256)": TypedContractEvent<
      OpenBuyOrderEvent.InputTuple,
      OpenBuyOrderEvent.OutputTuple,
      OpenBuyOrderEvent.OutputObject
    >;
    OpenBuyOrder: TypedContractEvent<
      OpenBuyOrderEvent.InputTuple,
      OpenBuyOrderEvent.OutputTuple,
      OpenBuyOrderEvent.OutputObject
    >;

    "OpenSellOrder(address,uint256,address,uint256)": TypedContractEvent<
      OpenSellOrderEvent.InputTuple,
      OpenSellOrderEvent.OutputTuple,
      OpenSellOrderEvent.OutputObject
    >;
    OpenSellOrder: TypedContractEvent<
      OpenSellOrderEvent.InputTuple,
      OpenSellOrderEvent.OutputTuple,
      OpenSellOrderEvent.OutputObject
    >;

    "RemoveCollateralToken(address)": TypedContractEvent<
      RemoveCollateralTokenEvent.InputTuple,
      RemoveCollateralTokenEvent.OutputTuple,
      RemoveCollateralTokenEvent.OutputObject
    >;
    RemoveCollateralToken: TypedContractEvent<
      RemoveCollateralTokenEvent.InputTuple,
      RemoveCollateralTokenEvent.OutputTuple,
      RemoveCollateralTokenEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "UpdateBeneficiary(address)": TypedContractEvent<
      UpdateBeneficiaryEvent.InputTuple,
      UpdateBeneficiaryEvent.OutputTuple,
      UpdateBeneficiaryEvent.OutputObject
    >;
    UpdateBeneficiary: TypedContractEvent<
      UpdateBeneficiaryEvent.InputTuple,
      UpdateBeneficiaryEvent.OutputTuple,
      UpdateBeneficiaryEvent.OutputObject
    >;

    "UpdateCollateralToken(address,uint256,uint256,uint32,uint256)": TypedContractEvent<
      UpdateCollateralTokenEvent.InputTuple,
      UpdateCollateralTokenEvent.OutputTuple,
      UpdateCollateralTokenEvent.OutputObject
    >;
    UpdateCollateralToken: TypedContractEvent<
      UpdateCollateralTokenEvent.InputTuple,
      UpdateCollateralTokenEvent.OutputTuple,
      UpdateCollateralTokenEvent.OutputObject
    >;

    "UpdateFees(uint256,uint256)": TypedContractEvent<
      UpdateFeesEvent.InputTuple,
      UpdateFeesEvent.OutputTuple,
      UpdateFeesEvent.OutputObject
    >;
    UpdateFees: TypedContractEvent<
      UpdateFeesEvent.InputTuple,
      UpdateFeesEvent.OutputTuple,
      UpdateFeesEvent.OutputObject
    >;

    "UpdateFormula(address)": TypedContractEvent<
      UpdateFormulaEvent.InputTuple,
      UpdateFormulaEvent.OutputTuple,
      UpdateFormulaEvent.OutputObject
    >;
    UpdateFormula: TypedContractEvent<
      UpdateFormulaEvent.InputTuple,
      UpdateFormulaEvent.OutputTuple,
      UpdateFormulaEvent.OutputObject
    >;

    "UpdatePricing(uint256,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      UpdatePricingEvent.InputTuple,
      UpdatePricingEvent.OutputTuple,
      UpdatePricingEvent.OutputObject
    >;
    UpdatePricing: TypedContractEvent<
      UpdatePricingEvent.InputTuple,
      UpdatePricingEvent.OutputTuple,
      UpdatePricingEvent.OutputObject
    >;
  };
}
