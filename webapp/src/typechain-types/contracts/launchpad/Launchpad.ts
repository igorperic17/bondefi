/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface LaunchpadInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyTokens"
      | "claim"
      | "createLaunch"
      | "getUserStats"
      | "launches"
      | "owner"
      | "pause"
      | "paused"
      | "refund"
      | "renounceOwnership"
      | "setPurchaseFactory"
      | "totalLaunches"
      | "transferOwnership"
      | "unpause"
      | "updateLaunch"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LaunchCreated"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
      | "UserInvestment"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buyTokens",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "createLaunch",
    values: [
      string,
      string,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStats",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "launches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPurchaseFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalLaunches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateLaunch",
    values: [
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "buyTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createLaunch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "launches", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPurchaseFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLaunches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateLaunch",
    data: BytesLike
  ): Result;
}

export namespace LaunchCreatedEvent {
  export type InputTuple = [launchId: BigNumberish];
  export type OutputTuple = [launchId: bigint];
  export interface OutputObject {
    launchId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserInvestmentEvent {
  export type InputTuple = [
    launchId: BigNumberish,
    user: AddressLike,
    amount: BigNumberish,
    tokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    launchId: bigint,
    user: string,
    amount: bigint,
    tokenAmount: bigint
  ];
  export interface OutputObject {
    launchId: bigint;
    user: string;
    amount: bigint;
    tokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Launchpad extends BaseContract {
  connect(runner?: ContractRunner | null): Launchpad;
  waitForDeployment(): Promise<this>;

  interface: LaunchpadInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyTokens: TypedContractMethod<
    [launchId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  claim: TypedContractMethod<[launchId: BigNumberish], [void], "nonpayable">;

  createLaunch: TypedContractMethod<
    [
      purchaseNftName: string,
      purchaseNftSymbol: string,
      purchaseToken: AddressLike,
      targetRaise: BigNumberish,
      capPerUser: BigNumberish,
      saleStart: BigNumberish,
      saleEnd: BigNumberish,
      purchaseFormula: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getUserStats: TypedContractMethod<
    [user: AddressLike, launchId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        nftBalance: bigint;
        purchaseAmount: bigint;
        tokenAmount: bigint;
      }
    ],
    "view"
  >;

  launches: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint
      ] & {
        id: bigint;
        purchaseToken: string;
        purchaseNftAddress: string;
        targetRaise: bigint;
        raised: bigint;
        tokensToBeEmitted: bigint;
        capPerUser: bigint;
        saleStart: bigint;
        saleEnd: bigint;
        totalUsers: bigint;
        purchaseFormula: string;
        reserveRatio: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  refund: TypedContractMethod<[launchId: BigNumberish], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setPurchaseFactory: TypedContractMethod<
    [factoryAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  totalLaunches: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateLaunch: TypedContractMethod<
    [
      launchId: BigNumberish,
      purchaseToken: AddressLike,
      targetRaise: BigNumberish,
      capPerUser: BigNumberish,
      saleStart: BigNumberish,
      saleEnd: BigNumberish,
      purchaseFormula: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyTokens"
  ): TypedContractMethod<
    [launchId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[launchId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createLaunch"
  ): TypedContractMethod<
    [
      purchaseNftName: string,
      purchaseNftSymbol: string,
      purchaseToken: AddressLike,
      targetRaise: BigNumberish,
      capPerUser: BigNumberish,
      saleStart: BigNumberish,
      saleEnd: BigNumberish,
      purchaseFormula: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getUserStats"
  ): TypedContractMethod<
    [user: AddressLike, launchId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        nftBalance: bigint;
        purchaseAmount: bigint;
        tokenAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "launches"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint
      ] & {
        id: bigint;
        purchaseToken: string;
        purchaseNftAddress: string;
        targetRaise: bigint;
        raised: bigint;
        tokensToBeEmitted: bigint;
        capPerUser: bigint;
        saleStart: bigint;
        saleEnd: bigint;
        totalUsers: bigint;
        purchaseFormula: string;
        reserveRatio: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<[launchId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPurchaseFactory"
  ): TypedContractMethod<[factoryAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalLaunches"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateLaunch"
  ): TypedContractMethod<
    [
      launchId: BigNumberish,
      purchaseToken: AddressLike,
      targetRaise: BigNumberish,
      capPerUser: BigNumberish,
      saleStart: BigNumberish,
      saleEnd: BigNumberish,
      purchaseFormula: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "LaunchCreated"
  ): TypedContractEvent<
    LaunchCreatedEvent.InputTuple,
    LaunchCreatedEvent.OutputTuple,
    LaunchCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "UserInvestment"
  ): TypedContractEvent<
    UserInvestmentEvent.InputTuple,
    UserInvestmentEvent.OutputTuple,
    UserInvestmentEvent.OutputObject
  >;

  filters: {
    "LaunchCreated(uint256)": TypedContractEvent<
      LaunchCreatedEvent.InputTuple,
      LaunchCreatedEvent.OutputTuple,
      LaunchCreatedEvent.OutputObject
    >;
    LaunchCreated: TypedContractEvent<
      LaunchCreatedEvent.InputTuple,
      LaunchCreatedEvent.OutputTuple,
      LaunchCreatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "UserInvestment(uint256,address,uint256,uint256)": TypedContractEvent<
      UserInvestmentEvent.InputTuple,
      UserInvestmentEvent.OutputTuple,
      UserInvestmentEvent.OutputObject
    >;
    UserInvestment: TypedContractEvent<
      UserInvestmentEvent.InputTuple,
      UserInvestmentEvent.OutputTuple,
      UserInvestmentEvent.OutputObject
    >;
  };
}
