/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface MockUniswapV3LiquidityManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_FEE_TIER"
      | "MAX_FEE_TIER"
      | "createPoolAndAddLiquidity"
      | "positionManager"
      | "uniswapFactory"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CreatePoolAndAddLiquidityCalled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_FEE_TIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FEE_TIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPoolAndAddLiquidity",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "positionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_FEE_TIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FEE_TIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPoolAndAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapFactory",
    data: BytesLike
  ): Result;
}

export namespace CreatePoolAndAddLiquidityCalledEvent {
  export type InputTuple = [
    token0: AddressLike,
    token1: AddressLike,
    amount0Desired: BigNumberish,
    amount1Desired: BigNumberish,
    feeTier: BigNumberish
  ];
  export type OutputTuple = [
    token0: string,
    token1: string,
    amount0Desired: bigint,
    amount1Desired: bigint,
    feeTier: bigint
  ];
  export interface OutputObject {
    token0: string;
    token1: string;
    amount0Desired: bigint;
    amount1Desired: bigint;
    feeTier: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MockUniswapV3LiquidityManager extends BaseContract {
  connect(runner?: ContractRunner | null): MockUniswapV3LiquidityManager;
  waitForDeployment(): Promise<this>;

  interface: MockUniswapV3LiquidityManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_FEE_TIER: TypedContractMethod<[], [bigint], "view">;

  MAX_FEE_TIER: TypedContractMethod<[], [bigint], "view">;

  createPoolAndAddLiquidity: TypedContractMethod<
    [
      token0: AddressLike,
      token1: AddressLike,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      feeTier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  positionManager: TypedContractMethod<[], [string], "view">;

  uniswapFactory: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_FEE_TIER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_FEE_TIER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createPoolAndAddLiquidity"
  ): TypedContractMethod<
    [
      token0: AddressLike,
      token1: AddressLike,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      feeTier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "positionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "uniswapFactory"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "CreatePoolAndAddLiquidityCalled"
  ): TypedContractEvent<
    CreatePoolAndAddLiquidityCalledEvent.InputTuple,
    CreatePoolAndAddLiquidityCalledEvent.OutputTuple,
    CreatePoolAndAddLiquidityCalledEvent.OutputObject
  >;

  filters: {
    "CreatePoolAndAddLiquidityCalled(address,address,uint256,uint256,uint24)": TypedContractEvent<
      CreatePoolAndAddLiquidityCalledEvent.InputTuple,
      CreatePoolAndAddLiquidityCalledEvent.OutputTuple,
      CreatePoolAndAddLiquidityCalledEvent.OutputObject
    >;
    CreatePoolAndAddLiquidityCalled: TypedContractEvent<
      CreatePoolAndAddLiquidityCalledEvent.InputTuple,
      CreatePoolAndAddLiquidityCalledEvent.OutputTuple,
      CreatePoolAndAddLiquidityCalledEvent.OutputObject
    >;
  };
}
