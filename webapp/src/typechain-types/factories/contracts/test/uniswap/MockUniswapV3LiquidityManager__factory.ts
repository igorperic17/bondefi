/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  MockUniswapV3LiquidityManager,
  MockUniswapV3LiquidityManagerInterface,
} from "../../../../contracts/test/uniswap/MockUniswapV3LiquidityManager";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount0Desired",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount1Desired",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint24",
        name: "feeTier",
        type: "uint24",
      },
    ],
    name: "CreatePoolAndAddLiquidityCalled",
    type: "event",
  },
  {
    inputs: [],
    name: "DEFAULT_FEE_TIER",
    outputs: [
      {
        internalType: "uint24",
        name: "",
        type: "uint24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MAX_FEE_TIER",
    outputs: [
      {
        internalType: "uint24",
        name: "",
        type: "uint24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount0Desired",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1Desired",
        type: "uint256",
      },
      {
        internalType: "uint24",
        name: "feeTier",
        type: "uint24",
      },
    ],
    name: "createPoolAndAddLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "positionManager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "uniswapFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101f4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632495016a1461005c57806338c65e7c1461007e57806367c55d0f14610088578063791b98bc1461009d5780638bdb2afa146100c8575b600080fd5b610065610bb881565b60405162ffffff90911681526020015b60405180910390f35b610065620f424081565b61009b61009636600461015b565b6100db565b005b6000546100b0906001600160a01b031681565b6040516001600160a01b039091168152602001610075565b6001546100b0906001600160a01b031681565b604080516001600160a01b038088168252861660208201529081018490526060810183905262ffffff821660808201527fa8f5eba62684642d44f37d03332210f6563067df7ee40e7cc9fdbdff8a5b2a4c9060a00160405180910390a15050505050565b80356001600160a01b038116811461015657600080fd5b919050565b600080600080600060a0868803121561017357600080fd5b61017c8661013f565b945061018a6020870161013f565b93506040860135925060608601359150608086013562ffffff811681146101b057600080fd5b80915050929550929590935056fea2646970667358221220c2bc566c7bf96021388cec8388e9042cd1cdf1fe91ae87d56747eb19cabdbbbd64736f6c63430008140033";

type MockUniswapV3LiquidityManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockUniswapV3LiquidityManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockUniswapV3LiquidityManager__factory extends ContractFactory {
  constructor(...args: MockUniswapV3LiquidityManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockUniswapV3LiquidityManager & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockUniswapV3LiquidityManager__factory {
    return super.connect(runner) as MockUniswapV3LiquidityManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockUniswapV3LiquidityManagerInterface {
    return new Interface(_abi) as MockUniswapV3LiquidityManagerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockUniswapV3LiquidityManager {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockUniswapV3LiquidityManager;
  }
}
