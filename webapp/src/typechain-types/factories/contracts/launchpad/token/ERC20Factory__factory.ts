/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  ERC20Factory,
  ERC20FactoryInterface,
} from "../../../../contracts/launchpad/token/ERC20Factory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_baseContract",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "FailedDeployment",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
    ],
    name: "ERC20BaseUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
    ],
    name: "ERC20Created",
    type: "event",
  },
  {
    inputs: [],
    name: "baseContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "address",
        name: "admin",
        type: "address",
      },
      {
        internalType: "address",
        name: "minter",
        type: "address",
      },
    ],
    name: "createERC20",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161047e38038061047e83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6103eb806100936000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80635b32619c1461003b578063e669e35b1461006a575b600080fd5b60005461004e906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b61004e6100783660046102a0565b600080548190610090906001600160a01b0316610134565b6040516323c56d0560e21b81529091506001600160a01b03821690638f15b414906100c590899089908990899060040161036b565b600060405180830381600087803b1580156100df57600080fd5b505af11580156100f3573d6000803e3d6000fd5b50506040516001600160a01b03841692507f41039c8b82bb5a365f56b4f9d87cee99e069b450bfdc3d87696fcd87783f24c19150600090a295945050505050565b6000610141826000610147565b92915050565b6000814710156101775760405163cf47918160e01b81524760048201526024810183905260440160405180910390fd5b763d602d80600a3d3981f3363d3d373d3d3d363d730000008360601b60e81c176000526e5af43d82803e903d91602b57fd5bf38360781b176020526037600983f090506001600160a01b0381166101415760405163b06ebf3d60e01b815260040160405180910390fd5b634e487b7160e01b600052604160045260246000fd5b600082601f83011261020857600080fd5b813567ffffffffffffffff80821115610223576102236101e1565b604051601f8301601f19908116603f0116810190828211818310171561024b5761024b6101e1565b8160405283815286602085880101111561026457600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b038116811461029b57600080fd5b919050565b600080600080608085870312156102b657600080fd5b843567ffffffffffffffff808211156102ce57600080fd5b6102da888389016101f7565b955060208701359150808211156102f057600080fd5b506102fd878288016101f7565b93505061030c60408601610284565b915061031a60608601610284565b905092959194509250565b6000815180845260005b8181101561034b5760208185018101518683018201520161032f565b506000602082860101526020601f19601f83011685010191505092915050565b60808152600061037e6080830187610325565b82810360208401526103908187610325565b6001600160a01b0395861660408501529390941660609092019190915250939250505056fea264697066735822122094f6fffeaa6d48da65f5effefb2b50fbef149820259e6b60bb9d7543482a233264736f6c63430008140033";

type ERC20FactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20FactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Factory__factory extends ContractFactory {
  constructor(...args: ERC20FactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _baseContract: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_baseContract, overrides || {});
  }
  override deploy(
    _baseContract: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_baseContract, overrides || {}) as Promise<
      ERC20Factory & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ERC20Factory__factory {
    return super.connect(runner) as ERC20Factory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20FactoryInterface {
    return new Interface(_abi) as ERC20FactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ERC20Factory {
    return new Contract(address, _abi, runner) as unknown as ERC20Factory;
  }
}
