/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../../../common";
import type {
  EtherReceiverMock,
  EtherReceiverMockInterface,
} from "../../../../../../../contracts/lib/uniswap/openzeppelin/contracts/mocks/EtherReceiverMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "bool",
        name: "acceptEther",
        type: "bool",
      },
    ],
    name: "setAcceptEther",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060cb8061001f6000396000f3fe608060405260043610601f5760003560e01c80634fea120c14604057603b565b36603b5760008054906101000a900460ff16603957600080fd5b005b600080fd5b348015604b57600080fd5b50607760048036036020811015606057600080fd5b810190808035151590602001909291905050506079565b005b806000806101000a81548160ff0219169083151502179055505056fea26469706673582212200c2bbca78950094f1a6967c760dddcbfe3b60dc0a88cbb337ae0dbcf15ca7b8864736f6c63430007060033";

type EtherReceiverMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EtherReceiverMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EtherReceiverMock__factory extends ContractFactory {
  constructor(...args: EtherReceiverMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      EtherReceiverMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): EtherReceiverMock__factory {
    return super.connect(runner) as EtherReceiverMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EtherReceiverMockInterface {
    return new Interface(_abi) as EtherReceiverMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): EtherReceiverMock {
    return new Contract(address, _abi, runner) as unknown as EtherReceiverMock;
  }
}
