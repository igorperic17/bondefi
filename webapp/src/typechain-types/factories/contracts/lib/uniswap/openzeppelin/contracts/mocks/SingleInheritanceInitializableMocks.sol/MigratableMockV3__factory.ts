/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../../../../common";
import type {
  MigratableMockV3,
  MigratableMockV3Interface,
} from "../../../../../../../../contracts/lib/uniswap/openzeppelin/contracts/mocks/SingleInheritanceInitializableMocks.sol/MigratableMockV3";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "anotherValue",
        type: "uint256",
      },
    ],
    name: "migrate",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "migrate",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "x",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "y",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610255806100206000396000f3fe60806040526004361061004a5760003560e01c80630c55699c1461004f5780633e54bacb146100765780638fd3ab801461009b578063a56dfe4a146100a3578063fe4b84df146100b8575b600080fd5b34801561005b57600080fd5b506100646100d5565b60408051918252519081900360200190f35b6100996004803603604081101561008c57600080fd5b50803590602001356100db565b005b610099610102565b3480156100af57600080fd5b5061006461012c565b610099600480360360208110156100ce57600080fd5b5035610132565b60015481565b60025460ff16156100eb57600080fd5b60019182556003556002805460ff19169091179055565b60045460ff161561011257600080fd5b60018054600380548355556004805460ff19169091179055565b60035481565b600054610100900460ff168061014b575061014b6101da565b80610159575060005460ff16155b6101945760405162461bcd60e51b815260040180806020018281038252602e8152602001806101f2602e913960400191505060405180910390fd5b600054610100900460ff161580156101bf576000805460ff1961ff0019909116610100171660011790555b600182905580156101d6576000805461ff00191690555b5050565b60006101e5306101eb565b15905090565b3b15159056fe496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564a2646970667358221220f6d216ad83ec03b6a9a2505ed896f754436088c102d3c170e7615317458d2ee564736f6c63430007060033";

type MigratableMockV3ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MigratableMockV3ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MigratableMockV3__factory extends ContractFactory {
  constructor(...args: MigratableMockV3ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MigratableMockV3 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MigratableMockV3__factory {
    return super.connect(runner) as MigratableMockV3__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MigratableMockV3Interface {
    return new Interface(_abi) as MigratableMockV3Interface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MigratableMockV3 {
    return new Contract(address, _abi, runner) as unknown as MigratableMockV3;
  }
}
