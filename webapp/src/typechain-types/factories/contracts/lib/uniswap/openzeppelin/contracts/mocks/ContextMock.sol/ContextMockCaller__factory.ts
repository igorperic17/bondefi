/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../../../../common";
import type {
  ContextMockCaller,
  ContextMockCallerInterface,
} from "../../../../../../../../contracts/lib/uniswap/openzeppelin/contracts/mocks/ContextMock.sol/ContextMockCaller";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ContextMock",
        name: "context",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "integerValue",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "stringValue",
        type: "string",
      },
    ],
    name: "callData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ContextMock",
        name: "context",
        type: "address",
      },
    ],
    name: "callSender",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610277806100206000396000f3fe608060405234801561001057600080fd5b50600436106100355760003560e01c80628604591461003a5780633207ad96146100f7575b600080fd5b6100f56004803603606081101561005057600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561008057600080fd5b82018360208201111561009257600080fd5b803590602001918460018302840111640100000000831117156100b457600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061011d945050505050565b005b6100f56004803603602081101561010d57600080fd5b50356001600160a01b03166101eb565b60408051631bb5f93160e11b815260048101848152602482019283528351604483015283516001600160a01b0387169363376bf262938793879390929160640190602085019080838360005b83811015610181578181015183820152602001610169565b50505050905090810190601f1680156101ae5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156101ce57600080fd5b505af11580156101e2573d6000803e3d6000fd5b50505050505050565b806001600160a01b031663d737d0c76040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561022657600080fd5b505af115801561023a573d6000803e3d6000fd5b505050505056fea26469706673582212208e5d8de4c8a60254ba3fe80fa9544fc91cfd278a89e0d4d064bbe6f42f71de4b64736f6c63430007060033";

type ContextMockCallerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ContextMockCallerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ContextMockCaller__factory extends ContractFactory {
  constructor(...args: ContextMockCallerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ContextMockCaller & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ContextMockCaller__factory {
    return super.connect(runner) as ContextMockCaller__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ContextMockCallerInterface {
    return new Interface(_abi) as ContextMockCallerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ContextMockCaller {
    return new Contract(address, _abi, runner) as unknown as ContextMockCaller;
  }
}
