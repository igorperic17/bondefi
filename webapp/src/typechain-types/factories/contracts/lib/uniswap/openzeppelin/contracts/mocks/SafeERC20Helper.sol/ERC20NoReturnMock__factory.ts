/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../../../../common";
import type {
  ERC20NoReturnMock,
  ERC20NoReturnMockInterface,
} from "../../../../../../../../contracts/lib/uniswap/openzeppelin/contracts/mocks/SafeERC20Helper.sol/ERC20NoReturnMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "allowance_",
        type: "uint256",
      },
    ],
    name: "setAllowance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101af806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063095ea7b31461005c57806323b872dd1461008a5780633ba93f26146100c0578063a9059cbb1461005c578063dd62ed3e146100dd575b600080fd5b6100886004803603604081101561007257600080fd5b506001600160a01b03813516906020013561011d565b005b610088600480360360608110156100a057600080fd5b506001600160a01b03813581169160208101359091169060400135610126565b610088600480360360208110156100d657600080fd5b5035610130565b61010b600480360360408110156100f357600080fd5b506001600160a01b0381358116916020013516610159565b60408051918252519081900360200190f35b50506000600155565b5050600060015550565b8060008061013c610175565b6001600160a01b0316815260208101919091526040016000205550565b506001600160a01b031660009081526020819052604090205490565b339056fea2646970667358221220acdaf6143b4a82eedd089f20e5e2798bc317db15d06ffccfb61c845ac245857b64736f6c63430007060033";

type ERC20NoReturnMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20NoReturnMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20NoReturnMock__factory extends ContractFactory {
  constructor(...args: ERC20NoReturnMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ERC20NoReturnMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ERC20NoReturnMock__factory {
    return super.connect(runner) as ERC20NoReturnMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20NoReturnMockInterface {
    return new Interface(_abi) as ERC20NoReturnMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ERC20NoReturnMock {
    return new Contract(address, _abi, runner) as unknown as ERC20NoReturnMock;
  }
}
