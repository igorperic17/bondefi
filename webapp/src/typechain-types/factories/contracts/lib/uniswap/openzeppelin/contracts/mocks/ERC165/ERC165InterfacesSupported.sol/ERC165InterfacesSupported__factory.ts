/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../../../../../../common";
import type {
  ERC165InterfacesSupported,
  ERC165InterfacesSupportedInterface,
} from "../../../../../../../../../contracts/lib/uniswap/openzeppelin/contracts/mocks/ERC165/ERC165InterfacesSupported.sol/ERC165InterfacesSupported";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes4[]",
        name: "interfaceIds",
        type: "bytes4[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "INTERFACE_ID_ERC165",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516103ce3803806103ce8339818101604052602081101561003357600080fd5b810190808051604051939291908464010000000082111561005357600080fd5b8382019150602082018581111561006957600080fd5b825186602082028301116401000000008211171561008657600080fd5b8083526020830192505050908051906020019060200280838360005b838110156100bd5780820151818401526020810190506100a2565b505050509050016040525050506100e06301ffc9a760e01b61012260201b60201c565b60005b815181101561011b5761010e8282815181106100fb57fe5b602002602001015161012260201b60201c565b80806001019150506100e3565b505061020d565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156101a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f81526020018061039f602f913960400191505060405180910390fd5b6001600080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6101838061021c6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806301ffc9a71461003b57806334d7006c1461009e575b600080fd5b6100866004803603602081101561005157600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506100db565b60405180821515815260200191505060405180910390f35b6100a6610142565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b6301ffc9a760e01b8156fea264697066735822122038c8d56d5cebf9881ff441424d1406f0b94a9fafa66a07a1970cf9d8f71259ee64736f6c63430007060033455243313635496e7465726661636573537570706f727465643a20696e76616c696420696e74657266616365206964";

type ERC165InterfacesSupportedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC165InterfacesSupportedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC165InterfacesSupported__factory extends ContractFactory {
  constructor(...args: ERC165InterfacesSupportedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    interfaceIds: BytesLike[],
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(interfaceIds, overrides || {});
  }
  override deploy(
    interfaceIds: BytesLike[],
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(interfaceIds, overrides || {}) as Promise<
      ERC165InterfacesSupported & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): ERC165InterfacesSupported__factory {
    return super.connect(runner) as ERC165InterfacesSupported__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC165InterfacesSupportedInterface {
    return new Interface(_abi) as ERC165InterfacesSupportedInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ERC165InterfacesSupported {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ERC165InterfacesSupported;
  }
}
